-- 电影社区数据库设计

-- 模块一：用户与社交 (User & Social)


-- 用户表
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone VARCHAR2(20) UNIQUE,
    password_hash VARCHAR2(255) NOT NULL,
    nickname VARCHAR2(50) NOT NULL,
    avatar_image_id NUMBER,
    bio CLOB,
    signature VARCHAR2(255),
    register_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    last_login_time TIMESTAMP,
    status NUMBER(2) DEFAULT 1 NOT NULL,  -- 1:正常 2:禁言 3:封禁
    -- role NUMBER(2) DEFAULT 1 NOT NULL,  -- 1:普通用户 9:管理员
    CONSTRAINT users_pk PRIMARY KEY (user_id)

);

CREATE INDEX idx_status ON users (status);

COMMENT ON COLUMN users.status IS '1:正常 2:禁言 3:封禁';

-- 图片表（头像以及电影海报）
CREATE TABLE images (
    id           NUMBER GENERATED BY DEFAULT AS IDENTITY,
    file_key     VARCHAR2(255) NOT NULL,        -- 相对路径
    size_bytes   NUMBER      NOT NULL,
    width        NUMBER,
    height       NUMBER,
    uploader_id  NUMBER       NOT NULL,
    created_at   TIMESTAMP    DEFAULT SYSTIMESTAMP,
    CONSTRAINT images_pk PRIMARY KEY (id),
    CONSTRAINT fk_images_uploader FOREIGN KEY (uploader_id) REFERENCES users(user_id) --- ON DELETE RESTRICT
);

ALTER TABLE  users ADD CONSTRAINT users_avatar_fk FOREIGN KEY (avatar_image_id) REFERENCES images(id) ON DELETE SET NULL;


--- 群组管理员表
CREATE TABLE group_admins (
    admin_id     NUMBER GENERATED BY DEFAULT AS IDENTITY,        -- 行主键，便于后期审计
    group_id     NUMBER NOT NULL,
    user_id      NUMBER NOT NULL,
    -- 管理员级别（可选）：owner / manager 等
    admin_role   VARCHAR2(30) DEFAULT 'manager',

    granted_at   TIMESTAMP DEFAULT SYSTIMESTAMP,
    granted_by   NUMBER NOT NULL,                -- 谁授予的

    CONSTRAINT group_admins_pk PRIMARY KEY (admin_id),
                         -- 群组删→管理员行自动删
    CONSTRAINT fk_group_admins_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,                       -- 用户删→解除其管理员身份
    CONSTRAINT uq_group_admin UNIQUE (group_id, user_id) -- 同一个群组内，同一个用户只能出现一次
);

-- 用户关注关系表
CREATE TABLE user_follows (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    follower_id NUMBER NOT NULL,  -- 关注者ID
    followed_id NUMBER NOT NULL,  -- 被关注者ID
    follow_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT user_follows_pk PRIMARY KEY (id),
    CONSTRAINT uk_follower_followed UNIQUE (follower_id, followed_id),
    CONSTRAINT fk_follower_user FOREIGN KEY (follower_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_followed_user FOREIGN KEY (followed_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE INDEX idx_follower ON user_follows (follower_id);
CREATE INDEX idx_followed ON user_follows (followed_id);

COMMENT ON COLUMN user_follows.follower_id IS '关注者ID';
COMMENT ON COLUMN user_follows.followed_id IS '被关注者ID';


-- 用户会话表
CREATE TABLE private_conversations (
    conversation_id NUMBER  GENERATED BY DEFAULT AS IDENTITY,-- 会话唯一标识符
    user_one_id NUMBER NOT NULL, --参与会话的第一个用户的ID (外键关联到 users 表)
    user_two_id NUMBER NOT NULL, --参与会话的第二个用户的ID (外键关联到 users 表)
    created_at TIMESTAMP DEFAULT SYSTIMESTAMP,

    CONSTRAINT private_conversations_pk PRIMARY KEY (conversation_id),
    CONSTRAINT fk_conversation_user_one FOREIGN KEY (user_one_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_conversation_user_two FOREIGN KEY (user_two_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT uq_conversation_participants UNIQUE (user_one_id, user_two_id), -- 确保 (user_one_id, user_two_id) 组合的唯一性
    CONSTRAINT chk_different_users CHECK (user_one_id <> user_two_id), -- 确保两个用户不同
    CONSTRAINT chk_user_order CHECK (user_one_id < user_two_id) -- 确保用户ID的顺序，避免 (A,B) 和 (B,A) 两种记录，使 (user_one_id, user_two_id) 成为规范的唯一键
);

--- 私信表
CREATE TABLE private_messages (
    message_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    conversation_id NUMBER NOT NULL,
    sender_id NUMBER NOT NULL,
    content CLOB NOT NULL,
    sent_at TIMESTAMP DEFAULT SYSTIMESTAMP,

    CONSTRAINT private_messages_pk PRIMARY KEY (message_id),
    CONSTRAINT fk_message_conversation FOREIGN KEY (conversation_id) REFERENCES private_conversations(conversation_id) ON DELETE CASCADE,
    CONSTRAINT fk_message_sender FOREIGN KEY (sender_id) REFERENCES users(user_id) ON DELETE CASCADE -- 通常 sender_id 不会级联删除，而是 SET NULL 或应用层面处理
    -- 注意: sender_id 必须是该 conversation_id 对应的 private_conversations 表中的 user_one_id 或 user_two_id。
    -- 这种复杂的约束通常通过应用逻辑或数据库触发器来保证。
);

-- 已读消息表
CREATE TABLE conversation_participant_read_status (
    conversation_id NUMBER NOT NULL,
    user_id NUMBER NOT NULL, -- 参与该会话的用户
    last_read_message_id NUMBER NULL, -- 该用户在此会话中最后已读的消息ID (允许为NULL，表示从未读过或所有消息都比这个新)

    CONSTRAINT conversation_participant_read_status_pk PRIMARY KEY (conversation_id, user_id),
    CONSTRAINT fk_read_status_conversation FOREIGN KEY (conversation_id) REFERENCES private_conversations(conversation_id) ON DELETE CASCADE,
    CONSTRAINT fk_read_status_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_read_status_message FOREIGN KEY (last_read_message_id) REFERENCES private_messages(message_id) ON DELETE SET NULL
    -- 注意: user_id 必须是该 conversation_id 对应的 private_conversations 表中的 user_one_id 或 user_two_id。
    -- 这个约束也通常通过应用逻辑或触发器保证。
);

-- 模块二：电影内容 (Movie Content)

-- 电影表
CREATE TABLE movies (
                        movie_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                        title VARCHAR2(255) NOT NULL,
                        original_title VARCHAR2(255),
                        release_date DATE,
                        duration NUMBER, -- COMMENT '片长(分钟)',
                        --- languages VARCHAR2(100),
                        countries VARCHAR2(100),
                        synopsis CLOB, --- COMMENT '剧情简介',
                        poster_url VARCHAR2(255),
                        -- average_rating DECIMAL(3,1) DEFAULT 0, 通过触发器/存储函数计算，存于视图
                        -- rating_count NUMBER DEFAULT 0, 通过触发器/存储函数计算，存于视图
                        create_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
                        update_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,

                        CONSTRAINT movies_pk PRIMARY KEY (movie_id)
);

CREATE INDEX idx_title ON movies (title);
CREATE INDEX idx_release_date ON movies (release_date);
-- CREATE INDEX idx_average_rating ON movies (average_rating);

--- 电影海报
CREATE TABLE user_avatars (
  movie_id  NUMBER NOT NULL,
  image_id  NUMBER NOT NULL,
  CONSTRAINT user_avatars_pk PRIMARY KEY (movie_id, image_id),
  CONSTRAINT fk_user_avatars_movie FOREIGN KEY (movie_id)  REFERENCES movies(movie_id)  ON DELETE CASCADE,
  CONSTRAINT fk_user_avatars_image FOREIGN KEY (image_id) REFERENCES images(id)      ON DELETE CASCADE
);

--- 电影语言
CREATE TABLE languages (
    id           NUMBER GENERATED BY DEFAULT AS IDENTITY,
    name         VARCHAR2(100)  ,
    CONSTRAINT languages_pk PRIMARY KEY (id)
    -- 本地名称
);

CREATE TABLE movie_languages (
    movie_id     NUMBER NOT NULL,
    language_id  NUMBER     NOT NULL,
    role         VARCHAR2(10) DEFAULT 'original' NOT NULL,

    CONSTRAINT movie_languages_pk PRIMARY KEY (movie_id, language_id, role),  -- 组合主键：同一部片在同一种角色上只能关联一次同一语言
    CONSTRAINT fk_ml_movie FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE,  -- 外键约束：电影或语言删除时自动清理关联记录
    CONSTRAINT fk_ml_language FOREIGN KEY (language_id) REFERENCES languages(id) ON DELETE CASCADE,
    CONSTRAINT role_check CHECK (role IN ('original', 'dubbed', 'subtitle'))
);

-- 电影类型关联表
CREATE TABLE movie_genres (
                              id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                              movie_id NUMBER NOT NULL,
                              genre VARCHAR2(50) NOT NULL,
                              CONSTRAINT movie_genres_pk PRIMARY KEY (id),
                              CONSTRAINT fk_movie_genres_movie FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE
);

CREATE INDEX idx_movie ON movie_genres (movie_id);
CREATE INDEX idx_genre ON movie_genres (genre);

-- 电影图片表(海报、剧照)
CREATE TABLE movie_images (
    image_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    movie_id NUMBER NOT NULL,
    image_url VARCHAR2(255) NOT NULL,
    image_type NUMBER(2) NOT NULL, -- 1:海报 2:剧照
    is_main NUMBER(1) DEFAULT 0, -- 是否主图
    upload_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT movie_images_pk PRIMARY KEY (image_id),
    CONSTRAINT fk_movie_images_movie FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE
);

CREATE INDEX idx_movie_img ON movie_images (movie_id);
COMMENT ON COLUMN movie_images.image_type IS '1:海报 2:剧照';
COMMENT ON COLUMN movie_images.is_main IS '是否主图';

-- 演职人员表
CREATE TABLE persons (
    person_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR2(100) NOT NULL,
    original_name VARCHAR2(100),
    gender NUMBER(1), -- 1:男 2:女 0:未知
    birth_date DATE,
    death_date DATE,
    biography CLOB,
    photo_url VARCHAR2(255),
    create_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    update_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT persons_pk PRIMARY KEY (person_id)
);

CREATE INDEX idx_person_name ON persons (name);
COMMENT ON COLUMN persons.gender IS '1:男 2:女 0:未知';

-- 电影-演职人员关联表
CREATE TABLE movie_person_relations (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    movie_id NUMBER NOT NULL,
    person_id NUMBER NOT NULL,
    relation_type NUMBER(2) NOT NULL, -- 1:导演 2:编剧 3:主演 4:配角 5:制片人
    character_name VARCHAR2(100), -- 饰演角色名
    CONSTRAINT movie_person_relations_pk PRIMARY KEY (id),
    CONSTRAINT uk_movie_person_role UNIQUE (movie_id, person_id, relation_type),
    CONSTRAINT fk_movie_person_relations_movie FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE,
    CONSTRAINT fk_movie_person_relations_person FOREIGN KEY (person_id) REFERENCES persons(person_id) ON DELETE CASCADE
);

CREATE INDEX idx_relation_movie ON movie_person_relations (movie_id);
CREATE INDEX idx_relation_person ON movie_person_relations (person_id);
CREATE INDEX idx_relation_type ON movie_person_relations (relation_type);
COMMENT ON COLUMN movie_person_relations.relation_type IS '1:导演 2:编剧 3:主演 4:配角 5:制片人';

-- 模块三：用户电影互动 (User Movie Interaction)

-- 用户评分表
CREATE TABLE user_ratings (
    rating_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER NOT NULL,
    movie_id NUMBER NOT NULL,
    score NUMBER(3,1) NOT NULL, -- 1.0-10.0分
    rating_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    update_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT user_ratings_pk PRIMARY KEY (rating_id),
    CONSTRAINT uk_user_movie UNIQUE (user_id, movie_id),
    CONSTRAINT fk_user_ratings_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_ratings_movie FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE
);

CREATE INDEX idx_user_ratings_id ON user_ratings (user_id);
CREATE INDEX idx_user_ratings_movie ON user_ratings (movie_id);
CREATE INDEX idx_user_ratings_score ON user_ratings (score);
COMMENT ON COLUMN user_ratings.score IS '1.0-10.0分';


-- 用户影评表
CREATE TABLE user_reviews (
    review_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER NOT NULL,
    movie_id NUMBER NOT NULL,
    title VARCHAR2(255),
    content CLOB NOT NULL,
    is_long NUMBER(1) DEFAULT 0, -- 0:短评 1:长评
    likes_count NUMBER DEFAULT 0,
    replies_count NUMBER DEFAULT 0,
    status NUMBER(2) DEFAULT 1, -- 1:正常 2:待审核 3:已删除
    create_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    update_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT user_reviews_pk PRIMARY KEY (review_id),
    CONSTRAINT fk_user_reviews_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_reviews_movie FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE
);

CREATE INDEX idx_user_reviews_id ON user_reviews (user_id);
CREATE INDEX idx_user_reviews_movie ON user_reviews (movie_id);
CREATE INDEX idx_user_reviews_status ON user_reviews (status);
CREATE INDEX idx_user_reviews_likes ON user_reviews (likes_count);
COMMENT ON COLUMN user_reviews.is_long IS '0:短评 1:长评';
COMMENT ON COLUMN user_reviews.status IS '1:正常 2:待审核 3:已删除';


-- 影评点赞表
CREATE TABLE review_likes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    review_id NUMBER NOT NULL,
    user_id NUMBER NOT NULL,
    like_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT review_likes_pk PRIMARY KEY (id),
    CONSTRAINT uk_review_user UNIQUE (review_id, user_id),
    CONSTRAINT fk_review_likes_review FOREIGN KEY (review_id) REFERENCES user_reviews(review_id) ON DELETE CASCADE,
    CONSTRAINT fk_review_likes_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE INDEX idx_review_likes_review ON review_likes (review_id);
CREATE INDEX idx_review_likes_user ON review_likes (user_id);

-- 影评回复表
CREATE TABLE REVIEW_REPLIES (
    REPLY_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    PARENT_REPLY_ID NUMBER NULL , -- COMMENT '父回复ID, null表示顶层回复',
    REVIEW_ID NUMBER NOT NULL,
    USER_ID NUMBER NOT NULL,
    CONTENT CLOB NOT NULL,
    REPLY_TIME TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    STATUS NUMBER(1) DEFAULT 1,-- COMMENT '1:正常 2:已删除',
    CONSTRAINT REVIEW_REPLES_PK PRIMARY KEY (REPLY_ID),
    CONSTRAINT FK_REVIEW_REPLIES_REVIEW FOREIGN KEY (REVIEW_ID) REFERENCES USER_REVIEWS(REVIEW_ID) ON DELETE CASCADE,
    CONSTRAINT FK_REVIEW_REPLIES_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_REVIEW_REPLIES_PARENT FOREIGN KEY (PARENT_REPLY_ID) REFERENCES REVIEW_REPLIES(REPLY_ID) ON DELETE CASCADE
);

CREATE INDEX IDX_REVIEW_REPLIES_REVIEW ON REVIEW_REPLIES (REVIEW_ID);
CREATE INDEX IDX_REVIEW_REPLIES_USER ON REVIEW_REPLIES (USER_ID);
CREATE INDEX IDX_REVIEW_REPLIES_PARENT ON REVIEW_REPLIES (PARENT_REPLY_ID);

COMMENT ON COLUMN REVIEW_REPLIES.PARENT_REPLY_ID IS '父回复ID, null表示顶层回复';
COMMENT ON COLUMN REVIEW_REPLIES.STATUS IS '1:正常 2:已删除';

-- 用户片单表("想看"与"看过")
CREATE TABLE USER_WATCHLISTS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    USER_ID NUMBER NOT NULL,
    MOVIE_ID NUMBER NOT NULL,
    STATUS NUMBER(1) NOT NULL, --- COMMENT '1:想看 2:看过',
    CREATE_TIME TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,

    CONSTRAINT USER_WATCHLISTS_PK PRIMARY KEY (ID),
    CONSTRAINT UK_USER_WATCHLISTS UNIQUE (USER_ID, MOVIE_ID),
    CONSTRAINT FK_USER_WATCHLISTS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_USER_WATCHLISTS_MOVIE FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES(MOVIE_ID) ON DELETE CASCADE
);

CREATE INDEX IDX_USER_WATCHLISTS_USER ON USER_WATCHLISTS (USER_ID);
CREATE INDEX IDX_USER_WATCHLISTS_MOVIE ON USER_WATCHLISTS (MOVIE_ID);
CREATE INDEX IDX_USER_WATCHLISTS_STATUS ON USER_WATCHLISTS (STATUS);

COMMENT ON COLUMN USER_WATCHLISTS.STATUS IS '1:想看 2:看过';

--- 推荐给用户的电影表
CREATE TABLE USER_MOVIE_RECOMMENDATIONS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    USER_ID NUMBER NOT NULL,
    MOVIE_ID NUMBER NOT NULL,-- COMMENT '被推荐的电影ID',
    RECOMMENDATION_TYPE VARCHAR2(50) NULL,-- COMMENT '推荐理由 (向用户展示) e.g., CF, CB, Trending, FriendBased',
    GENERATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,
    CONSTRAINT USER_MOVIE_RECOMMENDATIONS_PK PRIMARY KEY (ID),
    CONSTRAINT UK_USER_MOVIE_TYPE UNIQUE (USER_ID, MOVIE_ID, RECOMMENDATION_TYPE), -- 避免重复推荐
    CONSTRAINT FK_USER_RECOMMENDATIONS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_USER_RECOMMENDATIONS_MOVIE FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES(MOVIE_ID) ON DELETE CASCADE
);

CREATE INDEX IDX_USER_GENERATED ON USER_MOVIE_RECOMMENDATIONS (USER_ID, GENERATED_AT DESC);
COMMENT ON COLUMN USER_MOVIE_RECOMMENDATIONS.USER_ID IS '被推荐的用户ID';
COMMENT ON COLUMN USER_MOVIE_RECOMMENDATIONS.RECOMMENDATION_TYPE IS '推荐理由 (向用户展示) e.g., CF, CB, Trending, FriendBased';

-- 相似电影推荐表
CREATE TABLE RELATED_MOVIE_RECOMMENDATIONS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    SOURCE_MOVIE_ID NUMBER NOT NULL,--- COMMENT '源电影ID',
    RECOMMENDED_MOVIE_ID NUMBER NOT NULL,--- COMMENT '被推荐的相关电影ID',
    SIMILARITY_TYPE VARCHAR2(50) NOT NULL,--- COMMENT '相似类型, e.g., SameGenre, SameDirector, UserAlsoWatched',
    GENERATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,
    CONSTRAINT RELATED_MOVIE_RECOMMENDATIONS_PK PRIMARY KEY (ID),
    CONSTRAINT UK_SOURCE_TARGET_TYPE UNIQUE (SOURCE_MOVIE_ID, RECOMMENDED_MOVIE_ID, SIMILARITY_TYPE),
    CONSTRAINT FK_RELATED_SOURCE_MOVIE FOREIGN KEY (SOURCE_MOVIE_ID) REFERENCES MOVIES(MOVIE_ID) ON DELETE CASCADE,
    CONSTRAINT FK_RELATED_RECOMMENDED_MOVIE FOREIGN KEY (RECOMMENDED_MOVIE_ID) REFERENCES MOVIES(MOVIE_ID) ON DELETE CASCADE
);
COMMENT ON COLUMN RELATED_MOVIE_RECOMMENDATIONS.SOURCE_MOVIE_ID IS '源电影ID';
COMMENT ON COLUMN RELATED_MOVIE_RECOMMENDATIONS.RECOMMENDED_MOVIE_ID IS '被推荐的相关电影ID';
COMMENT ON COLUMN RELATED_MOVIE_RECOMMENDATIONS.SIMILARITY_TYPE IS '相似类型, e.g., SameGenre, SameDirector, UserAlsoWatched';


-- 模块四：社区小组与讨论 (Community Groups & Discussion) - 用户加入无需审核版本

-- 兴趣小组表
CREATE TABLE movie_groups (
                              group_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                              name VARCHAR2(100) NOT NULL,
                              description CLOB,
                              avatar_url VARCHAR2(255),
                              creator_id NUMBER NOT NULL,
                              -- member_count NUMBER DEFAULT 1, 通过触发器/存储函数计算
                              -- post_count NUMBER DEFAULT 0, 通过触发器/存储函数计算
    -- 移除 join_type 字段，因为不再需要审核加入
                              status NUMBER(1) DEFAULT 1, -- COMMENT '1:正常 2:禁言 3:已解散',
                              create_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,
                              update_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,

                              CONSTRAINT MOVIE_GROUPS_PK PRIMARY KEY (group_id),
                              FOREIGN KEY (creator_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE INDEX idx_movie_groups_creator ON  movie_groups(creator_id);
CREATE INDEX idx_movie_groups_status ON  movie_groups(status);

COMMENT ON COLUMN movie_groups.status IS '1:正常 2:禁言 3:已解散';

ALTER TABLE  group_admins ADD CONSTRAINT fk_group_admins_group FOREIGN KEY (group_id) REFERENCES movie_groups(group_id) ON DELETE CASCADE;


-- 小组成员表
CREATE TABLE group_members (
                               id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                               group_id NUMBER NOT NULL,
                               user_id NUMBER NOT NULL,
                               role NUMBER(1) DEFAULT 1 ,
                               join_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,
    -- 移除 '2:审核中' 的状态说明
                               status NUMBER(1) DEFAULT 1,

                               CONSTRAINT group_members_pk PRIMARY KEY (id),
                               CONSTRAINT uk_group_user UNIQUE (group_id, user_id),
                               CONSTRAINT  FK_GROUP_MEMBERS_GROUP_ID FOREIGN KEY (group_id) REFERENCES movie_groups(group_id) ON DELETE CASCADE,
                               CONSTRAINT  FK_GROUP_MEMBERS_USER_ID FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE INDEX idx_group_members_group ON group_members(group_id);
CREATE INDEX idx_group_members_user ON group_members(user_id);
CREATE INDEX idx_group_members_role ON group_members(role);

COMMENT ON COLUMN group_members.role IS '1:普通成员 2:管理员 3:创建者';
COMMENT ON COLUMN group_members.status IS '1:正常 2:审核中 3:已拒绝';

-- 小组帖子表
CREATE TABLE group_posts (
                             post_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                             group_id NUMBER NOT NULL,
                             user_id NUMBER NOT NULL,
                             title VARCHAR2(255) NOT NULL,
                             content CLOB NOT NULL,
                             --- likes_count NUMBER DEFAULT 0, 冗余属性通过触发器/存储函数计算
                             --- comments_count NUMBER DEFAULT 0, 冗余属性通过触发器/存储函数计算
                             is_top NUMBER(1) DEFAULT 0, --- COMMENT '是否置顶',
                             is_elite NUMBER(1) DEFAULT 0, --- COMMENT '是否加精',
                             status NUMBER(1) DEFAULT 1, -- COMMENT '1:正常 2:已删除',
                             create_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,
                             update_time TIMESTAMP DEFAULT SYSTIMESTAMP  NOT NULL,
                             --- last_reply_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL , 冗余属性通过触发器/存储函数计算

                             CONSTRAINT  group_posts_pk PRIMARY KEY (post_id),
                             CONSTRAINT fk_group_posts_group FOREIGN KEY (group_id) REFERENCES movie_groups(group_id) ON DELETE CASCADE,
                             CONSTRAINT fk_group_posts_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE INDEX idx_group_posts_group ON group_posts(group_id);
CREATE INDEX idx_group_posts_user ON group_posts(user_id);
CREATE  INDEX  idx_group_posts_status ON group_posts(status);
--- CREATE  INDEX  idx_last_reply ON group_posts(last_reply_time);
COMMENT ON COLUMN group_posts.is_top IS '是否置顶';
COMMENT ON COLUMN group_posts.is_elite IS '是否加精';
COMMENT ON COLUMN group_posts.status IS '1:正常 2:已删除';

-- 帖子附件(图片)表
CREATE TABLE post_attachments (
                                  attachment_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                                  post_id NUMBER NOT NULL,
                                  attachment_url VARCHAR2(255) NOT NULL,
                                  attachment_type NUMBER(1) DEFAULT 1 ,
                                  upload_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,

                                  CONSTRAINT post_attachments_pk PRIMARY KEY (attachment_id),
                                  CONSTRAINT FK_post_attachments_POST_ID FOREIGN KEY (post_id) REFERENCES group_posts(post_id) ON DELETE CASCADE
);
CREATE INDEX idx_post ON post_attachments(post_id);
COMMENT ON COLUMN post_attachments.attachment_type IS '1:图片 2:视频';

-- 帖子评论表
CREATE TABLE post_comments (
                               comment_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                               parent_comment_id NUMBER NULL,
                               post_id NUMBER NOT NULL,
                               user_id NUMBER NOT NULL,
                               content CLOB NOT NULL,
                               create_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,
                               status NUMBER(1) DEFAULT 1 ,

                               CONSTRAINT  post_comments_PK PRIMARY KEY (comment_id),
                               FOREIGN KEY (post_id) REFERENCES group_posts(post_id) ON DELETE CASCADE,
                               CONSTRAINT fk_post_comments_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                               FOREIGN KEY (parent_comment_id) REFERENCES post_comments(comment_id) ON DELETE CASCADE
);

CREATE INDEX idx_post_comments_post ON post_comments(post_id);
CREATE INDEX idx_post_comments_user ON post_comments(user_id);
COMMENT ON COLUMN post_comments.status IS '1:图片 2:视频';

-- 帖子点赞表
CREATE TABLE post_likes (
                            id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                            post_id NUMBER NOT NULL,
                            user_id NUMBER NOT NULL,
                            like_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,

                            CONSTRAINT post_likes_pk PRIMARY KEY (id),
                            CONSTRAINT uk_post_user UNIQUE  (post_id, user_id),
                            FOREIGN KEY (post_id) REFERENCES group_posts(post_id) ON DELETE CASCADE,
                            CONSTRAINT fk_post_likes_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE INDEX idx_post_likes_post ON post_likes(post_id);
CREATE INDEX idx_post_likes_user ON post_likes(user_id);

-- 帖子收藏表
CREATE TABLE post_favorites (
                                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                                post_id NUMBER NOT NULL,
                                user_id NUMBER NOT NULL,
                                favorite_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL ,

                                CONSTRAINT POST_FAVORITES_PK PRIMARY KEY (id),
                                CONSTRAINT uk_post_favorites_post_user UNIQUE (post_id, user_id),

                                FOREIGN KEY (post_id) REFERENCES group_posts(post_id) ON DELETE CASCADE,
                                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE INDEX idx_post_favorites_post ON post_favorites(post_id);
CREATE INDEX idx_post_favorites_user ON post_favorites(user_id);

-- 模块五：平台运营与监控 (Platform Operations & Monitoring)

-- 模影评举报表

CREATE TABLE review_reports (
    report_id   NUMBER GENERATED BY DEFAULT AS IDENTITY,
    review_id   NUMBER NOT NULL,
    reporter_id NUMBER NOT NULL,
    reason      NUMBER(1) NOT NULL,
    detail      CLOB,
    status      NUMBER(1) DEFAULT 1,
    report_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    handle_time TIMESTAMP,
    handler_id  NUMBER,
    handle_note CLOB,
    CONSTRAINT review_reports_pk PRIMARY KEY (report_id),
    CONSTRAINT review_reports_review_fk FOREIGN KEY (review_id)   REFERENCES user_reviews(review_id)   ON DELETE CASCADE,
    CONSTRAINT review_reports_reporter_fk FOREIGN KEY (reporter_id) REFERENCES users(user_id)       ON DELETE CASCADE,
    CONSTRAINT review_reports_handler_fk FOREIGN KEY (handler_id)  REFERENCES users(user_id)       ON DELETE SET NULL
);
CREATE INDEX idx_review_reports_review   ON review_reports (review_id);
CREATE INDEX idx_review_reports_reporter ON review_reports (reporter_id);
CREATE INDEX idx_review_reports_status   ON review_reports (status);

-- 影评举报字段注释
COMMENT ON COLUMN review_reports.reason IS '1:广告 2:人身攻击 3:剧透 4:违规内容 5:其他';
COMMENT ON COLUMN review_reports.status IS '1:未处理 2:已处理-通过 3:已处理-删除';
COMMENT ON COLUMN review_reports.handler_id IS '处理人ID';
COMMENT ON COLUMN review_reports.handle_note IS '处理意见';

-- 帖子举报表

CREATE TABLE post_reports (
    report_id   NUMBER GENERATED BY DEFAULT AS IDENTITY,
    post_id     NUMBER NOT NULL,
    reporter_id NUMBER NOT NULL,
    reason      NUMBER(1) NOT NULL,
    detail      CLOB,
    status      NUMBER(1) DEFAULT 1,
    report_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    handle_time TIMESTAMP,
    handler_id  NUMBER,
    handle_note CLOB,
    CONSTRAINT post_reports_pk PRIMARY KEY (report_id),
    CONSTRAINT post_reports_post_fk FOREIGN KEY (post_id)     REFERENCES group_posts(post_id) ON DELETE CASCADE,
    CONSTRAINT post_reports_reporter_fk FOREIGN KEY (reporter_id) REFERENCES users(user_id)     ON DELETE CASCADE,
    CONSTRAINT post_reports_handler_fk FOREIGN KEY (handler_id)  REFERENCES users(user_id)     ON DELETE SET NULL
);
CREATE INDEX idx_post_reports_post     ON post_reports (post_id);
CREATE INDEX idx_post_reports_reporter ON post_reports (reporter_id);
CREATE INDEX idx_post_reports_status   ON post_reports (status);

-- 帖子举报字段注释
COMMENT ON COLUMN post_reports.reason IS '1:广告 2:人身攻击 3:违规内容 4:其他';
COMMENT ON COLUMN post_reports.status IS '1:未处理 2:已处理-通过 3:已处理-删除';
COMMENT ON COLUMN post_reports.handler_id IS '处理人ID';
COMMENT ON COLUMN post_reports.handle_note IS '处理意见';

-- 小组举报表

CREATE TABLE group_reports (
    report_id   NUMBER GENERATED BY DEFAULT AS IDENTITY,
    group_id    NUMBER NOT NULL,
    reporter_id NUMBER NOT NULL,
    reason      NUMBER(1) NOT NULL,
    detail      CLOB,
    status      NUMBER(1) DEFAULT 1,
    report_time TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    handle_time TIMESTAMP,
    handler_id  NUMBER,
    handle_note CLOB,
    CONSTRAINT group_reports_pk PRIMARY KEY (report_id),
    CONSTRAINT group_reports_group_fk FOREIGN KEY (group_id)    REFERENCES movie_groups(group_id) ON DELETE CASCADE,
    CONSTRAINT group_reports_reporter_fk FOREIGN KEY (reporter_id) REFERENCES users(user_id)       ON DELETE CASCADE,
    CONSTRAINT group_reports_handler_fk FOREIGN KEY (handler_id)  REFERENCES users(user_id)       ON DELETE SET NULL
);
CREATE INDEX idx_group_reports_group    ON group_reports (group_id);
CREATE INDEX idx_group_reports_reporter ON group_reports (reporter_id);
CREATE INDEX idx_group_reports_status   ON group_reports (status);

-- 小组举报字段注释
COMMENT ON COLUMN group_reports.reason IS '1:广告 2:违规内容 3:政治敏感 4:其他';
COMMENT ON COLUMN group_reports.status IS '1:未处理 2:已处理-通过 3:已处理-解散';
COMMENT ON COLUMN group_reports.handler_id IS '处理人ID';
COMMENT ON COLUMN group_reports.handle_note IS '处理意见';

-- 用户违规记录表

CREATE TABLE user_violations (
    violation_id     NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id          NUMBER NOT NULL,
    type             NUMBER(1) NOT NULL,
    content_type     NUMBER(1),
    content_id       NUMBER,
    detail           CLOB,
    punishment       NUMBER(1),
    punishment_days  NUMBER,
    operator_id      NUMBER NOT NULL,
    create_time      TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT user_violations_pk PRIMARY KEY (violation_id),
    CONSTRAINT user_violations_user_fk FOREIGN KEY (user_id)     REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT user_violations_operator_fk FOREIGN KEY (operator_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE INDEX idx_user_violations_user     ON user_violations (user_id);
CREATE INDEX idx_user_violations_operator ON user_violations (operator_id);

-- 用户违规字段注释
COMMENT ON COLUMN user_violations.type IS '1:发布违规内容 2:恶意攻击 3:广告 4:其他';
COMMENT ON COLUMN user_violations.content_type IS '1:影评 2:帖子 3:评论 4:私信';
COMMENT ON COLUMN user_violations.content_id IS '相关内容ID';
COMMENT ON COLUMN user_violations.punishment IS '1:警告 2:禁言 3:封禁';
COMMENT ON COLUMN user_violations.punishment_days IS '处罚天数';
COMMENT ON COLUMN user_violations.operator_id IS '操作管理员ID';

-- 管理员操作日志表

CREATE TABLE admin_logs (
    log_id         NUMBER GENERATED BY DEFAULT AS IDENTITY,
    admin_id       NUMBER NOT NULL,
    operation_type NUMBER(1) NOT NULL,
    operation_detail CLOB NOT NULL,
    ip             VARCHAR2(50 CHAR),
    create_time    TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT admin_logs_pk PRIMARY KEY (log_id),
    CONSTRAINT admin_logs_admin_fk FOREIGN KEY (admin_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE INDEX idx_admin_logs_admin  ON admin_logs (admin_id);
CREATE INDEX idx_admin_logs_type   ON admin_logs (operation_type);

-- 管理员操作日志字段注释
COMMENT ON COLUMN admin_logs.operation_type IS '1:用户管理 2:内容审核 3:电影管理 4:小组管理';

-- 用户活动记录表(用于生成动态流，含 JSON)

CREATE TABLE user_activities_stream (
    activity_id   NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id       NUMBER NOT NULL,
    activity_type NUMBER(1) NOT NULL,
    target_type   NUMBER(1) NOT NULL,
    target_id     NUMBER NOT NULL,
    extra_data    CLOB,
    create_time   TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT user_activities_stream_pk PRIMARY KEY (activity_id),
    CONSTRAINT uas_user_fk FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE INDEX idx_uas_user      ON user_activities_stream (user_id);
CREATE INDEX idx_uas_type      ON user_activities_stream (activity_type);
CREATE INDEX idx_uas_ctime     ON user_activities_stream (create_time);

-- 用户活动记录字段注释
COMMENT ON COLUMN user_activities_stream.activity_type IS '1:评分 2:写评 3:想看 4:看过 6:加入小组 7:发帖';
COMMENT ON COLUMN user_activities_stream.target_type IS '1:电影 2:影评 4:小组 5:帖子';
